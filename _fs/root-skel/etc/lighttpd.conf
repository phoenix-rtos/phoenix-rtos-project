#######################################################################
##
## lighttpd single-file conf for Current DCU
##
#######################################################################

#######################################################################
## Some basic variable definitions
#######################################################################
var.log_root    = "/var/log"
var.server_root = "/usr/www"
var.state_dir   = "/var/run"
var.home_dir    = "/var/lib/lighttpd"
var.conf_dir    = "/etc/lighttpd"

var.http_port  =   80
var.https_port = 443

## XXX: debug logging not recommended for production; may be noisy
debug.log-file-not-found = "enable"
#debug.log-request-handling = "enable"
#debug.log-request-header = "enable"
#debug.log-response-header = "enable"
#debug.log-condition-handling = "enable"
#######################################################################
##  Basic Configuration
#######################################################################
server.port = http_port

## enabled modules
server.modules = (
  "mod_indexfile",
  "mod_access",
  "mod_accesslog",
  "mod_alias",
#  "mod_auth",
#  "mod_authn_file",
  "mod_openssl",
#  "mod_redirect",
  "mod_rewrite",
#  "mod_setenv",
  "mod_cgi"
  "mod_dirlisting",
  "mod_staticfile",
)

## Document root
server.document-root = server_root

## store a pid file
server.pid-file = state_dir + "/lighttpd.pid"

#server.stream-response-body = 1
#server.stream-request-body = 1

#######################################################################
##  Rewriting/redirections
#######################################################################
# Serve index.html when queried for non-existent files (except for the '/log'
# subdirectory). This way URLs can be parsed and handled by frontend app and
# we can still serve static files and output of the CGI scripts. The only
# exception is the '/log' subdir, where we want to get 404 error, if we're trying
# to download log file that does not exist.
url.rewrite-repeat-if-not-file = ( "^/(?!log/)" => "/index.html" )

#######################################################################
##  Logging Options
#######################################################################

## use syslog for error and access log
server.errorlog-use-syslog = "enable"
accesslog.use-syslog       = "enable"
accesslog.format = "%h %l %u %t \"%r\" %b %>s \"%{user-agent}i\" \"%{referer}i\""

## additional debugging logs, enable if you want them
#debug.log-request-handling        = "enable"
#debug.log-request-header          = "enable"
#debug.log-request-header-on-error = "enable"
#debug.log-response-header         = "enable"
#debug.log-file-not-found          = "enable"
#debug.log-condition-handling      = "enable"
#debug.log-state-handling          = "enable"
#debug.log-ssl-noise               = "enable"

#######################################################################
##  Tuning/Performance
## https://wiki.lighttpd.net/Docs_ResourceTuning
## https://wiki.lighttpd.net/Docs_Performance
#######################################################################
server.event-handler = "poll"
server.max-fds = 128

## performance options
## (too low might lower performance due to client having to reconnect;
##  too high might deny other clients if server.max-connections is reached)
server.max-keep-alive-requests = 6

## maximum concurrent connections the server will accept (1/2 of server.max-fds)
server.max-connections = 16

## 32 MB in kB, max size of request header + request body + request trailers
server.max-request-size = 32768

#######################################################################
##  Filename/File handling
#######################################################################

## (XXX: prefer a shorter list)
index-file.names += (
  "index.xhtml", "index.html", "index.htm", "default.htm", "index.cgi", "login.html"
)

## deny access the file-extensions
url.access-deny             = ( "~", ".inc" )

## which extensions should not be handle via static-file transfer
static-file.exclude-extensions = ( ".cgi")

## defaults to /var/tmp as we assume it is a local harddisk
server.upload-dirs = ( "/var/tmp" )

#######################################################################
##  Dirlisting Module
#######################################################################

dir-listing.activate      = "enable"
dir-listing.hide-dotfiles = "disable"
dir-listing.exclude       = ( "~$" )
dir-listing.encoding      = "UTF-8"

#######################################################################
##  CGI configuration
#######################################################################
alias.url += ( "/cgi-bin" => "/usr/www/cgi-bin" )
#auth.backend = "htdigest"
#auth.backend.htdigest.userfile = "/etc/lighttpd-htdigest.user"
$HTTP["url"] =~ "/cgi-bin/" {
    # no interpreters based on extension - always exec the file
    cgi.assign = ( "" => "" )
    dir-listing.activate = "disable"

    # enable authentication for all cgi scripts except ps_dcsap_http_proxy.cgi
#    $HTTP["url"] !~ "/cgi-bin/ps_dcsap_http_proxy.cgi|/cgi-bin/webname.cgi" {
#    auth.require = ("" =>
#        (
#            "method"  => "basic",
#            "realm"   => "admin",
#            "require" => "user=root"
#        )
#    )
#   }
}

#######################################################################
##  SSL Support
#######################################################################

# use HTTPS
## (XXX: use better syntax available with modern lighttpd releases)
## https://wiki.lighttpd.net/Docs_SSL
$SERVER["socket"] == ":" + https_port {
    ssl.engine                  = "enable"
#
#    ## certificate paths
    ssl.pemfile                 = "/etc/ph.crt"
#    ssl.privkey                 = "/local/certs/inc.phoenix-rtos.com.key"
#
    ssl.ca-file                 = "/etc/ca.crt"
#
#    ## enable and enforce client certificate verification
#    ssl.verifyclient.activate   = "disable"
#    #ssl.verifyclient.exportcert = "enable"
#    ssl.verifyclient.enforce    = "disable"
#    ssl.verifyclient.username   = "SSL_CLIENT_S_DN_CN"
#    ssl.verifyclient.depth      = 2
}

## Redirect all HTTP to HTTPS
## (XXX: use better syntax available with modern lighttpd releases)
## https://wiki.lighttpd.net/HowToRedirectHttpToHttps
$HTTP["scheme"] == "http" {
    # capture vhost name with regex conditiona -> %0 in redirect pattern
    # must be the most inner block to the redirect rule
    $HTTP["host"] =~ ".*" {
# disabled for now -deffer 2015-07-23
    #    url.redirect = (".*" => "https://%0$0")
    }
}

#######################################################################
##  Aliases
#######################################################################
alias.url += ( "/log/" => "/var/log/", "/data/" => "/mnt/sdcdata/")

#######################################################################
##  MIME type mappings
#######################################################################
# (XXX: omit for lighttpd 1.4.76 and later to use lighttpd builtin web types)
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".spec"         =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",
  ".rpm"          =>      "application/x-rpm",
  # make the default mime type application/octet-stream.
  ""              =>      "application/octet-stream",
 )
