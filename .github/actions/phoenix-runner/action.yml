# vim:sw=2:ts=2
# action name
name: 'phoenix-runner'

# action description
description: 'Runs Phoenix-RTOS tests'

inputs:
  image-tag:
    description: 'Docker image tag version'
    default: 'latest'
    required: false
  target:
    description: 'Specifies target to run tests'
    default: 'ia32-generic-qemu'
    required: false

  nightly:
    description: 'Run nightly mode'
    default: 'false'
    required: false

# we're using a composite action as `docker` action type doesn't allow non-static image specification
runs:
  using: 'composite'
  steps:
  - name: Run phoenix-build container
    shell: bash
    run: |
      IMAGE="ghcr.io/phoenix-rtos/devel:${{ inputs.image-tag }}"
      echo "Using Docker image: $IMAGE"

      # Collect all GITHUB_* env vars and format as -e KEY - omit value to avoid secret leakage
      GH_ENV_ARGS=$(env | grep ^GITHUB_ | cut -d= -f1 | sed 's/^/-e /')

      # Build the nightly flag logic
      NIGHTLY_ARG=""
      if [ "${{ inputs.nightly }}" = "true" ]; then
        NIGHTLY_ARG="--nightly"
      fi

      # runner args:
      #  -v  # output SKIP subresults at a top level
      #  -Oresults.csv # creates also junit xml
      # when running docker manually - we need to reflect the host paths (no Path translation is done in the runner)
      docker run --rm --privileged \
        -v "${{ github.workspace }}:${{ github.workspace }}" \
        -w "${{ github.workspace }}" \
        -v "${HOME}:${HOME}" \
        -v "${RUNNER_TEMP}:${RUNNER_TEMP}" \
        -v "${GITHUB_ENV}:${GITHUB_ENV}" \
        -v "${GITHUB_OUTPUT}:${GITHUB_OUTPUT}" \
        -e CI=true \
        -e HOME \
        -e RUNNER_TEMP \
        -e TARGET="${{ inputs.target }}" \
        $GH_ENV_ARGS \
        --entrypoint="./phoenix-rtos-tests/runner.py" \
        "$IMAGE" \
          -v \
          -T${{ inputs.target }} \
          $NIGHTLY_ARG \
          -Oresults.csv

# branding
branding:
  icon: terminal
  color: green
