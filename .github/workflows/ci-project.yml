# vim:sw=2:ts=2
name: ci-project

# on events
on:
  workflow_call:
    inputs:
      image-tag:
        type: string
        description: 'Docker image tag version'
        default: 'latest'
        required: false
      build_params:
        type: string
        description: "parameters to build.sh script"
        default: 'host core fs test project image'  # by default don't build ports
        required: false
      nightly:
        type: boolean
        default: false
        required: false

  workflow_dispatch:
    inputs:
      image-tag:
        type: string
        description: 'Docker image tag version'
        default: 'latest'
        required: false
      build_params:
        type: string
        description: "parameters to build.sh script"
        default: 'host core fs test project image'  # by default don't build ports
        required: false
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean


# jobs
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
#          - 'armv7a7-imx6ull-evk'
          - 'armv7a9-zynq7000-qemu'
#          - 'armv7a9-zynq7000-zedboard'
#          - 'armv7a9-zynq7000-zturn'
#          - 'armv7m4-stm32l4x6-nucleo'
#          - 'armv7m7-imxrt105x-evk'
#          - 'armv7m7-imxrt106x-evk'
#          - 'armv7m7-imxrt117x-evk'
#          - 'armv8r52-mps3an536-qemu'
#          - 'armv8m33-mcxn94x-frdm'
#          - 'aarch64a53-zynqmp-qemu'
#          - 'host-generic-pc'
#          - 'ia32-generic-pc'
#          - 'ia32-generic-qemu'
#          - 'riscv64-generic-qemu'
#          - 'riscv64-grfpga-artya7'
#          - 'sparcv8leon-generic-qemu'
#          - 'sparcv8leon-gr712rc-board'
#          - 'sparcv8leon-gr716-mimas'
#          - 'sparcv8leon-gr716-mini'
#          - 'sparcv8leon-gr740-mini'
        include:
          - target: 'armv7a9-zynq7000-qemu'
            additional_params: 'ports'
    steps:
      # step 1: checkout repository code inside the workspace directory of the runner
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # attach GCC problem matcher - will pin problems to files only in current submodule
      - name: Add GCC problem matcher
        run: echo "::add-matcher::.github/problem-matchers/gcc.json"

      # step 2: use our custom action to build the project
      - name: Build
        id: build
        uses: ./.github/actions/phoenix-build
        with:
          image-tag: ${{ inputs.image-tag }}
          target: ${{ matrix.target }}
          params: ${{ inputs.build_params }} ${{ matrix.additional_params }}
          nightly: ${{ inputs.nightly }}

      # step 3: tar rootfs
      - name: Tar rootfs
        working-directory: _fs
        run: tar -cvf ../rootfs-${{ matrix.target }}.tar ${{ matrix.target }}/root

      # step 4: tar project boot directory
      - name: Tar boot directory
        working-directory: _boot
        run: tar -cvf ../boot-${{ matrix.target }}.tar ${{ matrix.target }}

      # step 4: tar project boot directory
      - name: Tar build directory
        working-directory: _build
        run: tar -cvf ../build-${{ matrix.target }}.tar ${{ matrix.target }}/compile_commands.json

      # step 5: upload project boot and rootfs tarballs as build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phoenix-rtos-${{ matrix.target }}
          path: |
            boot-${{ matrix.target }}.tar
            rootfs-${{ matrix.target }}.tar
            build-${{ matrix.target }}.tar

  run-cpptest:
    needs: build
    name: Analyze project with C/C++test
    runs-on: self-hosted

    strategy:
      fail-fast: false
      matrix:
        target: ['armv7a9-zynq7000-qemu'] #, 'host-generic-pc', 'ia32-generic-qemu', 'riscv64-generic-qemu', 'sparcv8leon-generic-qemu', 'aarch64a53-zynqmp-qemu']

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    # Setup reviedog
    - name: ReviewDog setup
      uses: reviewdog/action-setup@v1
      if: true

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: phoenix-rtos-${{ matrix.target }}

    - name: Unpack build artifacts
      run: |
        mkdir -p  _build
        tar -xvf build-${{ matrix.target }}.tar -C _build

#    - name: Debug list unpacked build dir
#      run: |
#        pwd
#        set -e
#        echo "Listing _build top-level"
#        ls -la _build || true
#        echo "Listing target dir"
#        ls -la _build/${{ matrix.target }} || true
#        if [ -f _build/${{ matrix.target }}/compile_commands.json ]; then
#          echo "FOUND: _build/${{ matrix.target }}/compile_commands.json"
#        else
#          echo "MISSING: compile_commands.json"
#          ls -R _build
#          exit 1
#        fi


    # Runs code analysis with C/C++test.
    - name: Run C/C++test
      # Use the 'run-cpptest-action' GitHub action.
      uses: parasoft/run-cpptest-action@2.0.2
      # Optional parameters for 'run-cpptest-action'.
      with:
        # For CMake-based projects, use a compile_commands.json file as the input for analysis. 
        input: _build/${{ matrix.target }}/compile_commands.json
        testConfig: 'builtin://MISRA C 2023 (MISRA C 2012)'
        compilerConfig: 'gcc_14-aarch32'
        # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
        # reportFormat: xml,html,custom
        # additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'
        commandLinePattern: |
          ${cpptestcli} -compiler "${compilerConfig}" -config "${testConfig}" -property report.format=${reportFormat} -report "${reportDir}" \
          -module . -resource ${{ github.workspace }}/phoenix-rtos-kernel -exclude ${{ github.workspace }}/phoenix-rtos-kernel/test/\*.c -input "${input}" ${additionalParams}


    # Run Reviewdog
    - name: Run Reviewdog
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/report.sarif

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      shell: bash  # will enforce -o pipefail
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cat reports/report.sarif | reviewdog -f=sarif -diff="git diff -U0 HEAD^" -name=cpptest-pr -reporter=github-pr-review -fail-on-error

    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CpptestReports
        path: reports/*.*
#
#  test-emu:
#    needs: build
#    name: test EMU
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        target: ['armv7a9-zynq7000-qemu', 'host-generic-pc', 'ia32-generic-qemu', 'riscv64-generic-qemu', 'sparcv8leon-generic-qemu', 'aarch64a53-zynqmp-qemu']
#
#    steps:
#      - name: Checkout the repository
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: phoenix-rtos-${{ matrix.target }}
#
#      - name: Untar rootfs
#        working-directory: _fs
#        run: tar -xvf ../rootfs-${{ matrix.target }}.tar
#
#      - name: Create empty _boot
#        run: mkdir _boot
#
#      - name: Untar boot
#        working-directory: _boot
#        run: tar -xvf ../boot-${{ matrix.target }}.tar
#
#      - name: Add sanitizers problem matcher
#        run: echo "::add-matcher::.github/problem-matchers/sanitizer-errors.json"
#
#      - name: Test runner
#        id: runner
#        uses: ./.github/actions/phoenix-runner
#        with:
#          image-tag: ${{ inputs.image-tag }}
#          target: ${{ matrix.target }}
#          nightly: ${{ inputs.nightly }}
#
#      - name: Upload runner results
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-results-${{ matrix.target }}
#          path: |
#            results.csv
#            results.xml
#
#  test-hw:
#    needs: build
#    name: test HW
#    runs-on: ${{ matrix.target }}
#    strategy:
#      fail-fast: false
#      matrix:
#        target: ['armv7a7-imx6ull-evk', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'armv7a9-zynq7000-zedboard', 'armv7m4-stm32l4x6-nucleo']
#
#    steps:
#      - name: Checkout the repository
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: phoenix-rtos-${{ matrix.target }}
#
#      - name: Untar rootfs
#        working-directory: _fs
#        run: tar -xvf ../rootfs-${{ matrix.target }}.tar
#
#      - name: Create empty _boot
#        run: mkdir _boot
#
#      - name: Untar boot
#        working-directory: _boot
#        run: tar -xvf ../boot-${{ matrix.target }}.tar
#
#      - name: Test runner
#        id: runner
#        run: |
#          python3 ./phoenix-rtos-tests/runner.py -v -T${{ matrix.target }} ${{ inputs.nightly && '--nightly' || '' }} -Oresults.csv
#
#      - name: Upload runner results
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-results-${{ matrix.target }}
#          path: |
#            results.csv
#            results.xml
#
#  tests-summary:
#    if: success() || failure()   # don't care about cancelled runs
#    needs: ['test-emu', 'test-hw']
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download Artifacts
#        uses: actions/download-artifact@v4
#        with:
#          path: artifacts
#          pattern: test-results-*
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: Merge Test Results
#        run: |
#          pip3 install junitparser junit2html
#          junitparser merge artifacts/test-results-*/results.xml junit.xml
#          junit2html junit.xml junit.html
#        env:
#          PIP_BREAK_SYSTEM_PACKAGES: 1  # NOTE: we're running on emphemeral GH VMs, install packages globally
#
#      - name: Upload Merged Unit Test Results in HTML
#        uses: actions/upload-artifact@v4
#        with:
#          name: Merged Unit Test Results
#          if-no-files-found: ignore
#          path: |
#            junit.html
#            junit.xml
#
#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v2
#        with:
#          check_name: Unit Test Results
#          files: "junit.xml"
#
#
#  send-notification:
#    needs: ['build', 'test-emu', 'test-hw']
#    if: failure() && github.event_name != 'pull_request'
#    uses: phoenix-rtos/phoenix-rtos-project/.github/workflows/_send_google_chat.yml@master
#    secrets: inherit
#
