# vim:sw=2:ts=2
name: ci-project

# on events
on:
  workflow_call:
    secrets:
      CI_BOT_EMAIL_USERNAME:
        required: false
      CI_BOT_EMAIL_PASSWORD:
        required: false
    inputs:
      build_params:
        type: string
        description: "parameters to build.sh script"
        default: 'host core fs test project image'  # by default don't build ports
        required: false
      nightly:
        type: boolean
        default: false
        required: false


# jobs
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      build_result: ${{ steps.build.outcome }}
    strategy:
      matrix:
        target: ['armv7a7-imx6ull-evk', 'armv7a9-zynq7000-qemu', 'armv7a9-zynq7000-zedboard', 'armv7a9-zynq7000-zturn', 'armv7m4-stm32l4x6-nucleo', 'armv7m7-imxrt105x-evk', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'host-generic-pc', 'ia32-generic-pc', 'ia32-generic-qemu', 'riscv64-generic-qemu', 'riscv64-generic-spike']
        include:
          - target: 'ia32-generic-qemu'
            syspage: 'psh pc-ata uart16550'
          - target: 'armv7a9-zynq7000-qemu'
            additional_params: 'ports'
    steps:
      # step 1: checkout repository code inside the workspace directory of the runner
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # attach GCC problem matcher - will pin problems to files only in current submodule
      - uses: ammaraskar/gcc-problem-matcher@master

      # step 2: use our custom action to build the project
      - name: Build
        id: build
        uses: ./.github/actions/phoenix-build
        with:
          target: ${{ matrix.target }}
          syspage: ${{ matrix.syspage }}
          params: ${{ inputs.build_params }} ${{ matrix.additional_params }}
          nightly: ${{ inputs.nightly }}

      # step 3: tar rootfs
      - name: Tar rootfs
        working-directory: _fs
        run: tar -cvf ../rootfs-${{ matrix.target }}.tar ${{ matrix.target }}/root

      # step 4: upload project boot directory and tarball of rootfs as build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}
          path: |
            _boot/${{ matrix.target }}
            rootfs-${{ matrix.target }}.tar

  test-emu:
    needs: build
    name: test EMU
    runs-on: ubuntu-latest
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      fail-fast: ${{ ! inputs.nightly }}
      matrix:
        target: ['armv7a9-zynq7000-qemu', 'host-generic-pc', 'ia32-generic-qemu']

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Add sanitizers problem matcher
        run: echo "::add-matcher::.github/problem-matchers/sanitizer-errors.json"

      - name: Test runner
        id: runner
        uses: ./.github/actions/phoenix-runner
        with:
          target: ${{ matrix.target }}
          nightly: ${{ inputs.nightly }}

      - name: Upload runner results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.target }}
          path: |
            results.csv
            results.xml

  test-hw:
    needs: build
    name: test HW
    runs-on: ${{ matrix.target }}
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      fail-fast: ${{ ! inputs.nightly }}
      matrix:
        target: ['armv7a7-imx6ull-evk', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'armv7a9-zynq7000-zedboard', 'armv7m4-stm32l4x6-nucleo']

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Test runner
        id: runner
        run: |
          python3 ./phoenix-rtos-tests/runner.py -v -T${{ matrix.target }} ${{ inputs.nightly && '--nightly' || '' }} -Oresults.csv

      - name: Upload runner results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.target }}
          path: |
            results.csv
            results.xml

  tests-summary:
    if: success() || failure()   # don't care about cancelled runs
    needs: ['test-emu', 'test-hw']
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        # FIXME: download-artifact don't support downloading artifacts by wildcard, download all artifacts for now
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: Merge Test Results
        run: |
          pip3 install junitparser junit2html
          junitparser merge artifacts/test-results-*/results.xml junit.xml
          junit2html junit.xml junit.html

      - name: Upload Merged Unit Test Results in HTML
        uses: actions/upload-artifact@v3
        with:
          name: Merged Unit Test Results
          if-no-files-found: ignore
          path: |
            junit.html
            junit.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Unit Test Results
          files: "junit.xml"


  send-notification:
    needs: ['build', 'test-emu', 'test-hw']
    if: failure() && github.event_name != 'pull_request'
    uses: phoenix-rtos/phoenix-rtos-project/.github/workflows/_send_google_chat.yml@master
    secrets: inherit


  mail-notification:
    if: failure()
    needs: ['build', 'test-emu', 'test-hw']
    name: notify ci team using e-mail
    runs-on: ubuntu-latest
    steps:
      - name: Send mail
        # If there is some failure, not caused by build step or test runner step send mail
        if: >-
          ${{ needs.build.outputs.build_result != 'failure'
          && needs.test-emu.outputs.runner_result != 'failure'
          && needs.test-hw.outputs.runner_result != 'failure' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.CI_BOT_EMAIL_USERNAME }}
          password: ${{ secrets.CI_BOT_EMAIL_PASSWORD }}
          subject: Github Actions Warning
          to: ci@phoenix-rtos.com
          # Required sender full name (address can be skipped):
          from: Continuous Integration Bot
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          body: There is some problem with GH Actions. https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
