# vim:sw=2:ts=2
# reusable build/test workflow for submodules
name: ci-submodule

on:
  workflow_call:
    secrets:
      CI_BOT_EMAIL_USERNAME:
        required: false
      CI_BOT_EMAIL_PASSWORD:
        required: false
    inputs:
      build_params:
        type: string
        description: "parameters to build.sh script"
        default: 'host core fs test project image'  # by default don't build ports
        required: false
      nightly:
        type: boolean
        default: false
        required: false


jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      build_result: ${{ steps.build.outcome }}
    strategy:
      matrix:
        target: ['armv7a7-imx6ull-evk', 'armv7a9-zynq7000-qemu', 'armv7a9-zynq7000-zedboard', 'armv7a9-zynq7000-zturn', 'armv7m4-stm32l4x6-nucleo', 'armv7m7-imxrt105x-evk', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'host-generic-pc', 'ia32-generic-pc', 'ia32-generic-qemu', 'riscv64-generic-qemu', 'riscv64-generic-spike', 'sparcv8leon3-gr716-mini']
        include:
          - target: 'ia32-generic-qemu'
            syspage: 'psh pc-ata uart16550'
          - target: 'armv7a9-zynq7000-qemu'
            additional_params: 'ports'
    steps:
      # step 1 : checkout submodule
      - name: Checkout submodule
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # step 2: checkout phoenix-rtos-project repository code in .buildroot and symlink submodule name to `workspace`
      # that way workspace file paths will match submodule paths - making problem matchers work
      # BUILD_DIRECTORY - absolute path to phoenix-rtos-project
      # CI_CUSTOM_BUILDROOT - relative path to phoenix-rtos-project (from GH Actions workspace)
      - name: Checkout phoenix-rtos-project
        # we need to use relative paths here so they would work in docker env
        run: |
          mkdir .buildroot && cd .buildroot
          git clone https://github.com/phoenix-rtos/phoenix-rtos-project --recurse-submodules
          cd phoenix-rtos-project
          echo "BUILD_DIRECTORY=$(pwd)" >> $GITHUB_ENV
          echo "CI_CUSTOM_BUILDROOT=.buildroot/phoenix-rtos-project" >> $GITHUB_ENV
          git log -1 --pretty=oneline
          git submodule
          rm -rf ${{ github.event.repository.name }}
          ln -s ../.. ${{ github.event.repository.name }}

      # attach GCC problem matcher - will pin problems to files only in current submodule
      - uses: ammaraskar/gcc-problem-matcher@master

      # step 3: use our custom action to build the project
      - name: Build
        id: build
        uses: ./.buildroot/phoenix-rtos-project/.github/actions/phoenix-build    # BUILD_DIRECTORY value, but we can't use templates here
        with:
          target: ${{ matrix.target }}
          syspage: ${{ matrix.syspage }}
          params: ${{ inputs.build_params }} ${{ matrix.additional_params }}
          buildroot: ${{env.CI_CUSTOM_BUILDROOT}}

      # step 4: tar rootfs
      - name: Tar rootfs
        working-directory: ${{env.BUILD_DIRECTORY}}/_fs
        run: tar -cvf ../rootfs-${{ matrix.target }}.tar ${{ matrix.target }}/root

      # step 5: upload project boot directory and tarball of rootfs as build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}
          path: |
            ${{env.BUILD_DIRECTORY}}/_boot/${{ matrix.target }}
            ${{env.BUILD_DIRECTORY}}/rootfs-${{ matrix.target }}.tar

  test-emu:
    needs: build
    name: test EMU
    runs-on: ubuntu-latest
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      matrix:
        target: ['armv7a9-zynq7000-qemu', 'host-generic-pc', 'ia32-generic-qemu']

    steps:
      - name: Checkout phoenix-rtos-project
        uses: actions/checkout@v3
        with:
          repository: phoenix-rtos/phoenix-rtos-project
          submodules: recursive

      - name: Update submodule ${{ github.event.repository.name }}
        working-directory: ${{ github.event.repository.name }}
        run: |
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/heads/*:refs/remotes/origin/*"
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git checkout ${{ github.sha }} || git checkout ${{ github.event.pull_request.head.sha }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Add sanitizers problem matcher
        run: echo "::add-matcher::.github/problem-matchers/sanitizer-errors.json"

      - name: Test runner
        id: runner
        uses: ./.github/actions/phoenix-runner
        with:
          target: ${{ matrix.target }}

      - name: Upload runner results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.target }}
          path: |
            results.csv
            results.xml

  # runs on self-hosted runners with HW targets attached
  test-hw:
    needs: build
    name: test HW
    runs-on: ${{ matrix.target }}
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      matrix:
        target: ['armv7a7-imx6ull-evk', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'armv7a9-zynq7000-zedboard', 'armv7m4-stm32l4x6-nucleo']

    steps:
      - name: Checkout phoenix-rtos-project
        uses: actions/checkout@v3
        with:
          repository: phoenix-rtos/phoenix-rtos-project
          submodules: recursive

      - name: Update submodule ${{ github.event.repository.name }}
        working-directory: ${{ github.event.repository.name }}
        run: |
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/heads/*:refs/remotes/origin/*"
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git checkout ${{ github.sha }} || git checkout ${{ github.event.pull_request.head.sha }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Test runner
        id: runner
        run: |
          python3 ./phoenix-rtos-tests/runner.py -v -T${{ matrix.target }} -Oresults.csv

      - name: Upload runner results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.target }}
          path: |
            results.csv
            results.xml

  tests-summary:
    if: success() || failure()   # don't care about cancelled runs
    needs: ['test-emu', 'test-hw']
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        # FIXME: download-artifact don't support downloading artifacts by wildcard, download all artifacts for now
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: Merge Test Results
        run: |
          pip3 install junitparser junit2html
          junitparser merge artifacts/test-results-*/results.xml junit.xml
          junit2html junit.xml junit.html

      - name: Upload Merged Unit Test Results in HTML
        uses: actions/upload-artifact@v3
        with:
          name: Merged Unit Test Results
          if-no-files-found: ignore
          path: |
            junit.html
            junit.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Unit Test Results
          files: "junit.xml"


  send-notification:
    needs: ['build', 'test-emu', 'test-hw']
    if: failure() && github.event_name != 'pull_request'
    uses: phoenix-rtos/phoenix-rtos-project/.github/workflows/_send_google_chat.yml@master
    secrets: inherit
