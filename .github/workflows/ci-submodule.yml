# vim:sw=2:ts=2
# reusable build/test workflow for submodules
name: ci-submodule

on:
  workflow_call:
    secrets:
      CI_BOT_EMAIL_USERNAME:
        required: false
      CI_BOT_EMAIL_PASSWORD:
        required: false
    inputs:
      build_params:
        type: string
        description: "parameters to build.sh script"
        default: 'core fs test project image'  # by default don't build ports
        required: false


jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      build_result: ${{ steps.build.outcome }}
    strategy:
      matrix:
        target: ['armv7a7-imx6ull-evk', 'armv7a9-zynq7000-qemu', 'armv7a9-zynq7000-zedboard', 'armv7a9-zynq7000-zturn', 'armv7m4-stm32l4x6-nucleo', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'host-generic-pc', 'ia32-generic-pc', 'ia32-generic-qemu', 'riscv64-generic-qemu', 'riscv64-generic-spike']
        include:
          - target: 'ia32-generic-qemu'
            syspage: 'psh pc-ata uart16550'
    steps:
      # step 1: checkout phoenix-rtos-project repository code inside the workspace directory of the runner
      - name: Checkout phoenix-rtos-project
        uses: actions/checkout@v2
        with:
          repository: phoenix-rtos/phoenix-rtos-project
          submodules: recursive

      # step 2: update the submodule (recurse-sumbodules=no is needed for phoenix-rtos-lwip checkout not to fail, but it fails to update the submodule (TODO)
      - name: Update submodule ${{ github.event.repository.name }}
        working-directory: ${{ github.event.repository.name }}
        run: |
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/heads/*:refs/remotes/origin/*"
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git checkout ${{ github.sha }} || git checkout ${{ github.event.pull_request.head.sha }}

      # attach GCC problem matcher... might not work because of submodules... just trying
      - uses: ammaraskar/gcc-problem-matcher@master

      # step 3: use our custom action to build the project
      - name: Build
        id: build
        uses: ./.github/actions/phoenix-build
        with:
          target: ${{ matrix.target }}
          syspage: ${{ matrix.syspage }}
          params: ${{ inputs.build_params }}

      # step 4: tar rootfs
      - name: Tar rootfs
        working-directory: _fs
        run: tar -cvf ../rootfs-${{ matrix.target }}.tar ${{ matrix.target }}/root

      # step 5: upload project boot directory and tarball of rootfs as build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: phoenix-rtos-${{ matrix.target }}
          path: |
            _boot/${{ matrix.target }}
            rootfs-${{ matrix.target }}.tar

  test-emu:
    needs: build
    name: run tests on emulators
    runs-on: ubuntu-latest
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      matrix:
        target: ['armv7a9-zynq7000-qemu', 'host-generic-pc', 'ia32-generic-qemu']

    steps:
      - name: Checkout phoenix-rtos-project
        uses: actions/checkout@v2
        with:
          repository: phoenix-rtos/phoenix-rtos-project
          submodules: recursive

      - name: Update submodule ${{ github.event.repository.name }}
        working-directory: ${{ github.event.repository.name }}
        run: |
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/heads/*:refs/remotes/origin/*"
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git checkout ${{ github.sha }} || git checkout ${{ github.event.pull_request.head.sha }}

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Test runner
        id: runner
        uses: ./.github/actions/phoenix-runner
        with:
          target: ${{ matrix.target }}

  # runs on self-hosted runners with HW targets attached
  test-hw:
    needs: build
    name: run tests on hardware
    runs-on: ${{ matrix.target }}
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      matrix:
        target: ['armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk']

    steps:
      - name: Checkout phoenix-rtos-project
        uses: actions/checkout@v2
        with:
          repository: phoenix-rtos/phoenix-rtos-project
          submodules: recursive

      - name: Update submodule ${{ github.event.repository.name }}
        working-directory: ${{ github.event.repository.name }}
        run: |
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/heads/*:refs/remotes/origin/*"
          git fetch --recurse-submodules=no --force ${{ github.event.repository.clone_url }} "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git checkout ${{ github.sha }} || git checkout ${{ github.event.pull_request.head.sha }}

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Test runner
        id: runner
        run: |
          python3 ./phoenix-rtos-tests/runner.py -T${{ matrix.target }}

  mail-notification:
    if: ${{ failure() }}
    needs: ['build', 'test-emu', 'test-hw']
    name: notify ci team using e-mail
    runs-on: ubuntu-latest
    steps:
      - name: Send mail
        # If there is some failure, not caused by build step or test runner step send mail
        if: >-
          ${{ needs.build.outputs.build_result != 'failure'
          && needs.test-emu.outputs.runner_result != 'failure'
          && needs.test-hw.outputs.runner_result != 'failure' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.CI_BOT_EMAIL_USERNAME }}
          password: ${{ secrets.CI_BOT_EMAIL_PASSWORD }}
          subject: Github Actions Warning
          to: ci@phoenix-rtos.com
          # Required sender full name (address can be skipped):
          from: Continuous Integration Bot
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          body: There is some problem with GH Actions. https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}

