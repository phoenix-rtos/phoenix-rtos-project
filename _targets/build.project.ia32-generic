#!/bin/bash
#
# Shell script for building ia32-generic project
#
# Copyright 2018, 2019 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=i386-pc-phoenix-

: "${SYSPAGE=pc-tty pc-ata psh}"
: "${CONSOLE=vga}"
export CONSOLE
export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="


#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=y
export PORTS_LUA=n
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y
export PORTS_MICROPYTHON=y

#
# Platform dependent parameters
#
SIZE_PAGE=$((0x1000))
PAGE_MASK=$((~(SIZE_PAGE - 1)))


#
# Project specific build
#
BOOT_DEVICE="hd0"                 # Default boot device
NAME_USER_SCRIPT="user.plo"       # User script name
MAGIC_USER_SCRIPT=$((0xBAADF00D)) # User script magic value
OFFS_USER_SCRIPT=$((0x12000))     # Disk image user script offset (in bytes)
KERNEL_OFFS=$((0x13000))          # Disk image kernel offset (in bytes)
OFFS_ROOTFS=$((0x1000))           # Disk image rootfs offset (in 512 byte sectors)

# Pre-init script is launched before user script
PREINIT_SCRIPT=(
	"map ram 0x0 0xffffffff rwx"
	"phfs com2 0.1 phoenixd"
	"phfs floppy 2.0 raw"
	"phfs hd0 2.1 raw"
	"phfs hd1 2.2 raw"
	"phfs hd2 2.3 raw"
	"phfs hd3 2.4 raw"
)

if [ "$CONSOLE" = "serial" ]; then
	CONSOLE_APP="uart16550"
else
	CONSOLE_APP="pc-tty"
fi


# Obligatory applications to run Phoenix-RTOS
USER_SCRIPT=(
	"wait 1000"
	"kernel $BOOT_DEVICE"
	"app ${BOOT_DEVICE} -x pc-ata ram ram"
	"app ${BOOT_DEVICE} -x psh;-i;/etc/rc.psh ram ram"
	"app ${BOOT_DEVICE} -x ${CONSOLE_APP} ram ram"
	"go!"
)


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building $TARGET project"

	# Define default console device
	if [ "$CONSOLE" = "serial" ]; then
		PREINIT_SCRIPT+=("console 0.0")
	else
		PREINIT_SCRIPT+=("console 3.0")
	fi

	b_log "Building phoenix-rtos-loader"
	b_mkscript_preinit
	make -C plo base
}


b_le32hex() {
	local n=$1
	for ((i=0; i<4; i++)); do
		printf "%s%02x" "\x" $((n & 0xff))
		n=$((n >> 8))
	done
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	b_log "Creating rootfs"
	ROOTFS="$PREFIX_BOOT/rootfs.ext2"
	rm -f "$ROOTFS"
	SIZE_ROOTFS=$(find "$PREFIX_ROOTFS" -type f -exec du -k {} \; | awk 'BEGIN { sum=0 }; { sum+=$1; }; END { print sum }')
	SIZE_ROOTFS=$((3 * SIZE_ROOTFS / 2))
	echo "rootfs size: ${SIZE_ROOTFS}KB"
	genext2fs -b $SIZE_ROOTFS -i 2048 -d "$PREFIX_ROOTFS" "$ROOTFS"

	# Generate MBR partition table
	PTABLE="$PREFIX_BOOT/disk.ptable"
	{
		printf $(b_le32hex $((0x80)))
		printf $(b_le32hex $((0x83)))
		printf $(b_le32hex $((OFFS_ROOTFS)))
		printf $(b_le32hex $((2 * SIZE_ROOTFS)))
	} > "$PTABLE"

	# Build production image (sets $PHOENIX_DISK variable)
	b_mkscript_user "${USER_SCRIPT[@]}"
	b_prod_image

	# Update MBR partition table
	OFFSET=$((0x1be))
	b_add2img "$PTABLE" "$PHOENIX_DISK"

	# Add rootfs to PHOENIX_DISK
	printf "Copying "$ROOTFS" (offs="$OFFS_ROOTFS" blocks)\n"
	dd if="$ROOTFS" of="$PHOENIX_DISK" bs=512 seek="$OFFS_ROOTFS" conv=notrunc 2>/dev/null
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}


b_update_pkg() { :; }


export -f b_build_target
