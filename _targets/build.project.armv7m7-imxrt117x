#!/bin/bash
#
# Shell script for building armv7m7-imxrt117x project
#
# Copyright 2018, 2019, 2020, 2021 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski, Hubert Buczynski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

CROSS=arm-phoenix-

export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"

#
# Ports configuration
#
export PORTS_BUSYBOX=n
export PORTS_PCRE=n
export PORTS_OPENSSL=n
export PORTS_LIGHTTPD=n
export PORTS_DROPBEAR=n
export PORTS_LUA=n
export PORTS_LZO=n
export PORTS_OPENVPN=n
export PORTS_JANSSON=n
export PORTS_CURL=n



#
# Platform dependent parameters
#
SIZE_PAGE=$((0x200))
PAGE_MASK=$((0xfffffe00))
KERNEL_OFFS=$((0x11000))


#
# Project specific build
#

PROGS=()
BOOT_DEVICE="flash0"
NAME_USER_SCRIPT="user.plo"
OFFS_USER_SCRIPT=$((0x10a00))
MAGIC_USER_SCRIPT=

# Pre-init script is launched before user script
PREINIT_SCRIPT=("map itcm 0 40000 rwx"
                "map dtcm 20000000 20028000 rw"
                "map ocram2 202c0000 2033fe00 rwx"
                "map xip1 30000000 30400000 rx"
                "phfs flash0 2.0 raw"
                "console 0.10"
                "wait 2000")

# Obligatory applications to run Phoenix-RTOS
USER_SCRIPT=("kernel ${BOOT_DEVICE}"
             "app ${BOOT_DEVICE} -x dummyfs xip1 ocram2"
             "app ${BOOT_DEVICE} -x imxrt-multi ocram2 ocram2"
             "app ${BOOT_DEVICE} -x psh xip1 ocram2")


b_mkscript_user() {
	ksz=$((($(wc -c < "${PREFIX_PROG_STRIPPED}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf") + SIZE_PAGE - 1) & PAGE_MASK))
	poffs=$((KERNEL_OFFS + ksz))

	printf "%08x" "$MAGIC_USER_SCRIPT" >> "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT"
	for cmd in "${USER_SCRIPT[@]}"; do
		args=($cmd)
		case "${args[0]}"
		in
			app)
				if [ "${args[2]}" = "-x" ] ; then
					name=$(cut -d ';' -f 1 <<< "${args[3]}")
				else
					name=$(cut -d ';' -f 1 <<< "${args[2]}")
				fi

				PROGS+=("$name")
				psz=$((($(wc -c < "${PREFIX_PROG_STRIPPED}$name") + SIZE_PAGE - 1) & PAGE_MASK))
				printf "alias %s 0x%x 0x%x\n" "$name" "$poffs" "$psz" >> "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT"
				((poffs+=psz));;

			kernel)
				printf "alias %s 0x%x 0x%x\n" "phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "$KERNEL_OFFS" "$ksz" >> "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT";;
		esac;
		printf "%s\n" "$cmd" >> "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT"
	done

	printf "\0" >> "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT"
}


b_mkscript_preinit() {
	for cmd in "${PREINIT_SCRIPT[@]}"; do
		printf "%s\n" "$cmd" >> "$PREFIX_BUILD/plo/script.plo"
	done

	sz=$(wc -c < "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT")
	{
		printf "alias %s 0x%x 0x%x\n" "$NAME_USER_SCRIPT" "$OFFS_USER_SCRIPT" "$sz"
		printf "call %s %s %08x\n" "$BOOT_DEVICE" "$NAME_USER_SCRIPT" "$MAGIC_USER_SCRIPT"
		printf "\0"
	} >> "$PREFIX_BUILD/plo/script.plo"
}

b_build_target() {

	b_log "Building sample project for $TARGET"

	# FIXME: build plo out of tree and without clean
	b_log "Building plo"
	make -C plo clean all

	MAGIC_USER_SCRIPT=$((($RANDOM % 0xffff) | (($RANDOM % 0xffff) << 16)))
	b_mkscript_user
	b_mkscript_preinit

	b_log "Relink plo to include the new script"
	make -C plo all

	cp "${PREFIX_PROG_STRIPPED}plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" _boot/
	cp "phoenix-rtos-hostutils/psu/plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.sdp" _boot/
}


b_add2img() {
	printf "Copying %s (offs=%dB)\n" "$1" "$OFFSET"
	dd if="$1" of="$2" bs=1 seek="$OFFSET" conv=notrunc 2>/dev/null
	SZ=$((($(wc -c < "$1") + SIZE_PAGE - 1) & PAGE_MASK))
	OFFSET=$((OFFSET + SZ))
}


b_image_target() {
	b_log "Creating image"

	IMG=_boot/phoenix-${TARGET}.disk
	rm -f "$IMG"

	# Loader
	OFFSET=0
	b_add2img "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$IMG"

	# User script
	OFFSET="$OFFS_USER_SCRIPT"
	b_add2img "$PREFIX_BUILD/plo/$NAME_USER_SCRIPT" "$IMG"

	# Kernel
	OFFSET="$KERNEL_OFFS"
	b_add2img "${PREFIX_PROG_STRIPPED}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "$IMG"

	#Programs
	for prog in "${PROGS[@]}"; do
		b_add2img "${PREFIX_PROG_STRIPPED}$prog" "$IMG"
	done
}

b_test_target() {
	:
}

export -f b_build_target
