#!/usr/bin/env bash
#
# Shell script for building riscv64-generic project
#
# Copyright 2018-2020, 2024 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski, Lukasz Leczkowski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=riscv64-phoenix-

export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Ports configuration
#
export PORTS_BUSYBOX=n
export PORTS_PCRE=n
export PORTS_OPENSSL=n
export PORTS_LIGHTTPD=n
export PORTS_DROPBEAR=n
export PORTS_LUA=n
export PORTS_LZO=n
export PORTS_OPENVPN=n
export PORTS_JANSSON=n
export PORTS_CURL=n
export PORTS_COREMARK=n
export PORTS_COREMARK_PRO=n


#
# Platform dependent parameters
#
export SIZE_PAGE=$((0x1000))

#
# Project specific build
#

export BOOT_DEVICE="ram0"           # Default boot device
export MAGIC_USER_SCRIPT="dabaabad" # User script magic value


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building $TARGET project"
	b_log "Building phoenix-rtos-loader"

	image_builder.py script --nvm "$NVM_CONFIG" --script "$PLO_SCRIPT_PREINIT" --out script.plo
	RAM_SCRIPT=1 image_builder.py script --nvm "$NVM_CONFIG" --script "$PLO_SCRIPT_PREINIT" --out script-ram.plo
	make -C plo all

	cp -a "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$PREFIX_BOOT/plo.img"
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	b_log "Creating rootfs"
	ROOTFS="$PREFIX_BOOT/part_rootfs.img"
	SIZE_PARTITION_KB=$(image_builder.py query --nvm "$NVM_CONFIG" '{{ nvm.vblk0.rootfs.size // 1024 if "vblk0" in nvm else 0 }}')

	if [ "$SIZE_PARTITION_KB" -gt 0 ]; then

		rm -f "$ROOTFS"
		SIZE_ROOTFS=$(du -ks "$PREFIX_ROOTFS" | cut -f 1)
		echo "rootfs size: ${SIZE_ROOTFS} kB / $((SIZE_PARTITION_KB)) kB"
		[ "$SIZE_ROOTFS" -gt "$SIZE_PARTITION_KB" ] && b_die "rootfs size exceeds the target partition!"
		genext2fs -b "$SIZE_PARTITION_KB" -i 2048 -d "$PREFIX_ROOTFS" "$ROOTFS"

		# Disk image rootfs offset (in 512 byte sectors)
		OFFS_ROOTFS=$(image_builder.py query --nvm "$NVM_CONFIG" '{{ nvm.vblk0.rootfs.offs // nvm.vblk0._meta.block_size }}')

		# Generate MBR partition table
		PTABLE="$PREFIX_BOOT/part_vblk0_mbr.img"
		{
			printf "$(b_le32hex $((0x80)))"
			printf "$(b_le32hex $((0x83)))"
			printf "$(b_le32hex $((OFFS_ROOTFS)))"
			printf "$(b_le32hex $((2 * SIZE_PARTITION_KB)))"
			for ((i=0; i<48; i++)); do
				printf "\x00"
			done
			# add MBR magic
			printf "\x55\xaa"
		} > "$PTABLE"
	fi

	# create all partition images
	image_builder.py -v partition --nvm "$NVM_CONFIG" --name kernel --script "$PLO_SCRIPT_USER"

	# create full disk images
	image_builder.py -v disk --nvm "$NVM_CONFIG" --part "plo=$PREFIX_BOOT/plo.img"
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}
