#!/bin/bash
#
# Shell script for building riscv64-generic project
#
# Copyright 2018, 2019, 2020 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=riscv64-phoenix-

export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Ports configuration
#
export PORTS_BUSYBOX=n
export PORTS_PCRE=n
export PORTS_OPENSSL=n
export PORTS_LIGHTTPD=n
export PORTS_DROPBEAR=n
export PORTS_LUA=n
export PORTS_LZO=n
export PORTS_OPENVPN=n
export PORTS_JANSSON=n
export PORTS_CURL=n


#
# Platform dependent parameters
#
SIZE_PAGE=$((0x1000))
PAGE_MASK=$((~(SIZE_PAGE - 1)))

#
# Project specific build
#

BOOT_DEVICE="ram0"                # Default boot device
NAME_USER_SCRIPT="user.plo"       # User script name
MAGIC_USER_SCRIPT=$((0xdabaabad)) # User script magic value
OFFS_USER_SCRIPT=$((0x10000))     # Disk image user script offset (in bytes)
KERNEL_OFFS=$((0x11000))          # Disk image kernel offset (in bytes)
OFFS_ROOTFS=$((0x10))             # Disk image rootfs offset (in 512 byte sectors)


# Pre-init script is launched before user script
PREINIT_SCRIPT=(
	"map kddr 0x80200000 0x8025ffff rwx"
	"map ddr 0x80260000 0x87ffffff rwx"
	"phfs ram0 4.0 raw"
	"console 0.0"
)


USER_SCRIPT=(
	"kernel ${BOOT_DEVICE}"
	"app ${BOOT_DEVICE} -x dummyfs;-N;devfs;-D ddr ddr"
	"app ${BOOT_DEVICE} -x uart16550 ddr ddr"
	"app ${BOOT_DEVICE} -x psh;-i;/etc/rc.psh ddr ddr"
	"app ${BOOT_DEVICE} -x virtio-blk;-r;0:0 ddr ddr"
	"wait 500"
	"go!"
)


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building $TARGET project"
	b_log "Building phoenix-rtos-loader"

	b_mkscript_preinit
	make -C plo all

	${CROSS}objcopy -O binary "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "$PREFIX_BOOT/plo.img"

	# Add plo to boot loader
	b_log "Adding PLO to boot loader"

	OSBI_BUILD_DIR="$PREFIX_BUILD/opensbi"

	(cd "$PREFIX_PROJECT/riscv/opensbi/" && make O="$OSBI_BUILD_DIR" CROSS_COMPILE="$CROSS" PLATFORM=generic FW_PAYLOAD_PATH="$PREFIX_BOOT/plo.img")
	cp "$OSBI_BUILD_DIR/platform/generic/firmware/fw_payload.elf" "$PREFIX_BOOT/phoenix.osbi"
}


b_le32hex() {
	local n=$1
	for ((i=0; i<4; i++)); do
		printf "%s%02x" "\x" $((n & 0xff))
		n=$((n >> 8))
	done
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	b_log "Creating rootfs"
	ROOTFS="$PREFIX_BOOT/rootfs.ext2"
	rm -f "$ROOTFS"
	SIZE_ROOTFS=$(find "$PREFIX_ROOTFS" -type f -exec du -k {} \; | awk 'BEGIN { sum=0 }; { sum+=$1; }; END { print sum }')
	SIZE_ROOTFS=$((3 * SIZE_ROOTFS))
	echo "rootfs size: ${SIZE_ROOTFS}KB"
	genext2fs -b $SIZE_ROOTFS -i 2048 -d "$PREFIX_ROOTFS" "$ROOTFS"

	# Generate MBR partition table
	PTABLE="$PREFIX_BOOT/disk.ptable"
	{
		printf "$(b_le32hex $((0x80)))"
		printf "$(b_le32hex $((0x83)))"
		printf "$(b_le32hex $((OFFS_ROOTFS)))"
		printf "$(b_le32hex $((2 * SIZE_ROOTFS)))"
		for ((i=0; i<48; i++)); do
			printf "\x00"
		done
		# add MBR magic
		printf "\x55\xaa"
	} > "$PTABLE"

	# Generate disk image
	DISK="$PREFIX_BOOT/rootfs.disk"
	rm -f "$DISK"
	OFFSET=$((0x1be))
	b_add2img "$PTABLE" "$DISK"
	printf "Copying %s (offs=%s blocks)\n" "$ROOTFS" "$OFFS_ROOTFS"
	dd if="$ROOTFS" of="$DISK" seek="$OFFS_ROOTFS" conv=notrunc 2>/dev/null

	b_mkscript_user "${USER_SCRIPT[@]}"
	cp "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT" "${PREFIX_BOOT}"

	b_prod_image
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}
