#!/bin/bash
#
# Shell script for building riscv64-generic project
#
# Copyright 2018, 2019, 2020 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=riscv64-phoenix-

: "${RISCV_LOADER="opensbi"}"

export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=n
export PORTS_LUA=n
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y


#
# Platform dependent parameters
#
SIZE_PAGE=$((0x1000))
PAGE_MASK=$((~(SIZE_PAGE - 1)))
KERNEL_OFFS=$((0x0))          # Disk image kernel offset (in bytes)


#
# Project specific build
#

BOOT_DEVICE="hd0"              # Default boot device
NAME_USER_SCRIPT="user.plo"       # User script name
MAGIC_USER_SCRIPT=$((0xdabaabad)) # User script magic value
OFFS_USER_SCRIPT=$((0x0))         # Disk image user script offset (in bytes)
OFFS_ROOTFS=$((0x1000))           # Disk image rootfs offset (in 512 byte sectors)


# Pre-init script is launched before user script
PREINIT_SCRIPT=(
	"map ddr 0x80200000 0x87ffffff rwx"
	"console 0.0"
	"wait 2000"
)


PRIMARY_SCRIPT=(
	"kernelimg ${BOOT_DEVICE}"
	"app ${BOOT_DEVICE} -x dummyfs ddr ddr"
	"app ${BOOT_DEVICE} -x uart16550 ddr ddr"
	"app ${BOOT_DEVICE} -x psh ddr ddr"
)


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


# Temporary solution to omit phoenix-rtos-loader
b_syspage_gen() {
	img="$1"
	uscript="$2"

	start=$(readelf -s "${PREFIX_PROG}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" | grep "\b_start\b" | awk '{ printf("0x%s", $2) }')
	syspage=$(readelf -s "${PREFIX_PROG}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" | grep "\b_syspage_data\b" | awk '{ printf("0x%s", $2) }')
	syspage_end=$(readelf -s "${PREFIX_PROG}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" | grep "\b_syspage_data_end\b" | awk '{ printf("0x%s", $2) }')

	addr=$((syspage-start))
	sz=$((syspage_end-syspage))

	"$PREFIX_BOOT/syspagen" \
		-a "64" \
		-s "0x80200000:$addr:$sz" \
		-p "$PLO_SCRIPT_DIR/script.plo" \
		-u "$uscript" \
		-i "$img"
}


b_build_target() {
	b_log "Building $TARGET project"

	b_mkscript_user "${PRIMARY_SCRIPT[@]}"
	b_mkscript_preinit

	# Build production image
	b_log "Image"
	b_mkscript_user "${PRIMARY_SCRIPT[@]}"
	b_kernel_image "$PREFIX_BOOT/phoenix-kernel.img"
	b_syspage_gen "$PREFIX_BOOT/phoenix-kernel.img" "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT"

	# Add kernel to boot loader
	b_log "Adding kernel to boot loader"
	BBL_BUILD_DIR="$PREFIX_BUILD/riscv-pk"
	OSBI_BUILD_DIR="$PREFIX_BUILD/opensbi"

	if [ "$RISCV_LOADER" = "bbl" ]; then
		mkdir -p "$BBL_BUILD_DIR"
		pushd "$BBL_BUILD_DIR" > /dev/null || exit 1
			if [ ! -f "$BBL_BUILD_DIR/stamp.configured" ]; then
				"$TOPDIR/riscv/riscv-pk/configure" --host="${CROSS%?}" --with-payload="$PREFIX_BOOT/phoenix-kernel.img" --disable-fp-emulation
				touch "$BBL_BUILD_DIR/stamp.configured"
			fi

			env -i PATH="$PATH" make $MAKEFLAGS all
		popd > /dev/null

		cp "$BBL_BUILD_DIR/bbl" "$PREFIX_BOOT/phoenix.bbl"
	elif [ "$RISCV_LOADER" = "opensbi" ]; then
		(cd "$TOPDIR/riscv/opensbi/" && make O="$OSBI_BUILD_DIR" CROSS_COMPILE="$CROSS" PLATFORM=generic FW_PAYLOAD_PATH="$PREFIX_BOOT/phoenix-kernel.img")

		cp "$OSBI_BUILD_DIR/platform/generic/firmware/fw_payload.elf" "$PREFIX_BOOT/phoenix.osbi"
	else
		cp "$PREFIX_PROG_STRIPPED/phoenix-$TARGET.bin" "$PREFIX_BOOT"
	fi
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	b_log "Creating rootfs"
	ROOTFS="$PREFIX_BOOT/rootfs.ext2"
	rm -f "$ROOTFS"
	size=$(find "${PREFIX_ROOTFS}" -type f -exec du -k {} \; | awk 'BEGIN { sum=0 }; { sum+=$1; }; END { print sum }')
	size=$((size * 150 / 100))
	echo "rootfs size: $size"
	genext2fs -b $size -d "$PREFIX_ROOTFS" "$ROOTFS"

	# Create disk image
	PHOENIX_DISK="$PREFIX_BOOT/phoenix.disk"
	rm -f "$PHOENIX_DISK"

	# Add kernel to PHOENIX_DISK
	printf "Copying "$PREFIX_BOOT/phoenix-kernel.img" (offs=0 blocks)\n"
	dd if="$PREFIX_BOOT/phoenix-kernel.img" of="$PHOENIX_DISK" bs=512 conv=notrunc 2>/dev/null

	# Add rootfs to PHOENIX_DISK
	printf "Copying "$ROOTFS" (offs="$OFFS_ROOTFS" blocks)\n"
	dd if="$ROOTFS" of="$PHOENIX_DISK" bs=512 seek="$OFFS_ROOTFS" conv=notrunc 2>/dev/null
}


b_test_target() {
	:
}


export -f b_build_target
