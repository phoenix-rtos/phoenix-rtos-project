#!/bin/bash
#
# Shell script for building armv7a7-imx6ull project
#
# Copyright 2018, 2019, 2020, 2021 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski, Maciej Purski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=arm-phoenix-

: "${SYSPAGE=psh dummyfs imx6ull-flash imx6ull-uart psd}"

export BUSYBOX_CONFIG="$(realpath "busybox_config")"
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=y
export PORTS_LUA=n
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y

#
# Platform dependent parameters
#
SIZE_PAGE=$((0x1000))
PAGE_MASK=$((~(SIZE_PAGE - 1)))



# Pre-init script is launched before user script
PREINIT_SCRIPT=(
	"map kddr 0x80000000 0x8002ffff rwx"
	"map ddr 0x80030000 0x90000000 rwx"
	"phfs usb0 1.2 phoenixd"
	"console 0.0"
	"wait 2000"
	"kernel usb0"
	"app usb0 -x dummyfs ddr ddr"
	"app usb0 -x imx6ull-uart ddr ddr"
	"app usb0 -x psh ddr ddr"
)


# Obligatory applications to run Phoenix-RTOS
USER_SCRIPT=(
	"wait 2000"
)


#
# Project specific build
#

BOOT_DEVICE="flash0"          # Default boot device
NAME_USER_SCRIPT="user.plo"   # User script name
MAGIC_USER_SCRIPT=            # User script magic value
OFFS_USER_SCRIPT=$((0x12000)) # Disk image user script offset (in bytes)
KERNEL_OFFS=$((0x13000))      # Disk image kernel offset (in bytes)
OFFS_ROOTFS=$((0x1000))       # Disk image rootfs offset (in 512 byte sectors)


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building sample project for $TARGET"

	b_log "Creating CPIO archive"
	pushd "$PREFIX_PROG_STRIPPED" >/dev/null || exit 1
		echo "${SYSPAGE}" | tr " " "\n" | cpio -H newc -ov > "$PREFIX_BUILD/phoenix-rtos-kernel/programs.cpio" 2>/dev/null
	popd >/dev/null || exit 1

	# Relink kernel to include newly created cpio archive
	make -C phoenix-rtos-kernel all

	BIN="phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}"
	: "${KERNEL_TARGET_BIN="$BIN"}"
	"${CROSS}objcopy" -O binary "$PREFIX_PROG_STRIPPED/${BIN}.elf" "$PREFIX_BOOT/${KERNEL_TARGET_BIN}.img"

	b_mkscript_user USER_SCRIPT
	b_mkscript_preinit
	make -C plo ram

	cp "${PREFIX_PROG_STRIPPED}plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" _boot/
	cp "phoenix-rtos-hostutils/psu/plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.sdp" _boot/
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	# Build production image
	b_prod_image

	IMG_VERSION="$(git describe --dirty 2> /dev/null || echo unknown-"$(git describe --always --dirty)")"
	echo "$IMG_VERSION" > "$PREFIX_ROOTFS/etc/version"

	# FIXME: does work only on macOS, for now hackish solution based on extending PATH
	mtd-utils/build.sh
	PATH="$(pwd)/_build/host-pc/prog/:$PATH"
	IMG="$PREFIX_BOOT/phoenix-armv7a7-imx6ull.jffs2"

	mkfs.jffs2 -U -m none -e $((64*4096)) -s 4096 -r "$PREFIX_ROOTFS"/ -o "$IMG"
	if sumtool -e $((64*4096)) -i "$IMG" -o "$IMG.tmp" 2> /dev/null; then
		echo "JFFS2 Summary nodes created"
		mv "$IMG.tmp" "$IMG"
	fi

	sz=$(du -k "$IMG" | awk '{ print $1 }')
	echo "Filesystem size: ${sz}KB"
}

b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}

export -f b_build_target
