#!/bin/bash
#
# Common shell script's functions for imxrt
#
# Copyright 2021 Phoenix Systems
# Author: Hubert Buczynski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

KERNEL_ELF="phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf"

# Function gets the following argument:
# - $1 - array contains user's commands
#
# Output variables:
# - PROGS - names of the applications defined in the script
b_mkscript_user() {
	PROGS=()
	local cmds=("$@")
	mkdir -p "$PLO_SCRIPT_DIR"

	# Function needs external variables to be defined in a project file:
	: "${MAGIC_USER_SCRIPT:?variable unset}" # number which is assigned to user script
	: "${NAME_USER_SCRIPT:?variable unset}"  # name of the user script
	: "${KERNEL_OFFS:?variable unset}"       # offset on flash memory where kernel is located
	: "${SIZE_PAGE:?variable unset}"
	: "${PAGE_MASK:?variable unset}"

	# Find out if we need a .elf or a .bin kernel.
	# We need to know the kernel size in the image before first app cmd (which might be before kernel cmd)
	for cmd in "${cmds[@]}"; do
		args=($cmd)

		if [ "${args[0]}" = "kernel" ]; then
			KERNEL_FILE=$KERNEL_ELF
			break
		elif [ "${args[0]}" = "kernelimg" ]; then
			KERNEL_BIN="$(basename "${KERNEL_ELF}" .elf).bin"
			${CROSS}objcopy "${PREFIX_PROG_STRIPPED}${KERNEL_ELF}" -O binary "${PREFIX_PROG_STRIPPED}${KERNEL_BIN}"
			KERNEL_FILE=$KERNEL_BIN
			break
		fi
	done

	ksz=$((($(wc -c < "${PREFIX_PROG_STRIPPED}${KERNEL_FILE}") + SIZE_PAGE - 1) & PAGE_MASK))
	poffs=$((KERNEL_OFFS + ksz))

	{
		printf "%08x\n" "$MAGIC_USER_SCRIPT"
		for cmd in "${cmds[@]}"; do
			args=($cmd)
			case "${args[0]}"
			in
				app)
					if [ "${args[2]:0:1}" = "-" ]; then
						name=${args[3]%%;*}
					else
						name=${args[2]%%;*}
					fi

					PROGS+=("$name")
					psz=$(wc -c < "${PREFIX_PROG_STRIPPED}$name")
					printf "alias %s 0x%x 0x%x\n" "$name" "$poffs" "$psz"
					((poffs+=(psz + SIZE_PAGE - 1) & PAGE_MASK))
					printf "%s\n" "$cmd";;

				kernel)
					printf "alias %s 0x%x 0x%x\n" "${KERNEL_FILE}" "$KERNEL_OFFS" "$ksz"
					printf "%s\n" "$cmd";;

				kernelimg)
					printf "alias %s 0x%x 0x%x\n" "${KERNEL_FILE}" "$KERNEL_OFFS" "$ksz"
					tbeg=$(readelf -l "${PREFIX_PROG_STRIPPED}$KERNEL_ELF" | grep "R E" | awk '{ print $3 }')
					tsz=$(readelf -l "${PREFIX_PROG_STRIPPED}$KERNEL_ELF" | grep "R E" | awk '{ print $6 }')
					dbeg=$(readelf -l "${PREFIX_PROG_STRIPPED}$KERNEL_ELF" | grep "RW" | awk '{ print $3 }')
					dsz=$(readelf -l "${PREFIX_PROG_STRIPPED}$KERNEL_ELF" | grep "RW" | awk '{ print $6 }')
					tsz=$(((tsz + SIZE_PAGE - 1) & PAGE_MASK))
					dsz=$(((dsz + SIZE_PAGE - 1) & PAGE_MASK))
					printf "%s %s %x %x %x %x\n" "$cmd" "${KERNEL_FILE}" $((tbeg)) $((tsz)) $((dbeg)) $((dsz));;

				*)
					printf "%s\n" "$cmd";;

			esac;
		done

		printf "\0"
	} > "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT"
}


# Optional variables used for remote firmware upgrade:
# - NAME_USER2_SCRIPT - name of the secondary user script
# - OFFS_USER2_SCRIPT - offset of the secondary user script
# - BANKSWITCH - indicates if bankswitch command should be emitted
b_mkscript_preinit() {
	mkdir -p "$PLO_SCRIPT_DIR"

	# Function needs external variables to be defined in a project file:
	: "${PREINIT_SCRIPT:?variable unset}"     # array of basic commands which configure the platform
	: "${NAME_USER_SCRIPT:?variable unset}"   # name of the user script
	: "${MAGIC_USER_SCRIPT:?variable unset}"  # number which is assigned to user script
	: "${BOOT_DEVICE:?variable unset}"        # name of the device from which script is called
	: "${OFFS_USER_SCRIPT:?variable unset}"   # offset on flash memory where user script is located

	{
		printf "%s\n" "${PREINIT_SCRIPT[@]}"
		printf "\0"
	} > "$PLO_SCRIPT_DIR/script-ram.plo"

	{
		printf "%s\n" "${PREINIT_SCRIPT[@]}"

		printf "alias %s 0x%x 0x%x\n" "$NAME_USER_SCRIPT" "$OFFS_USER_SCRIPT" "$((KERNEL_OFFS - OFFS_USER_SCRIPT))"
		printf "call %s %s %08x\n" "$BOOT_DEVICE" "$NAME_USER_SCRIPT" "$MAGIC_USER_SCRIPT"
		if [ -n "${BANKSWITCH}" ]; then
			printf "bankswitch\n"
		fi
		if [ -n "${NAME_USER2_SCRIPT}" ]; then
			printf "alias %s 0x%x 0x%x\n" "$NAME_USER2_SCRIPT" "$OFFS_USER2_SCRIPT" "$((KERNEL_OFFS - OFFS_USER_SCRIPT))"
			printf "call %s %s %08x\n" "$BOOT_DEVICE" "$NAME_USER2_SCRIPT" "$MAGIC_USER_SCRIPT"
		fi
		printf "\0"
	} > "$PLO_SCRIPT_DIR/script.plo"
}


# Function gets the following arguments:
# - $1 - path to file which should be added to image
# - $2 - path to image file
b_add2img() {
	# Function needs external variables to be defined in a project file:
	: "${OFFSET:?variable unset}"    # starting file's position in the image
	: "${SIZE_PAGE:?variable unset}"
	: "${PAGE_MASK:?variable unset}"

	printf "Copying %s (offs=%dB)\n" "$1" "$OFFSET"
	dd if="$1" of="$2" bs=1 seek="$OFFSET" conv=notrunc 2>/dev/null
	sz=$((($(wc -c < "$1") + SIZE_PAGE - 1) & PAGE_MASK))
	OFFSET=$((OFFSET + sz))
}


b_prod_image() {
	b_log "Creating production images"

	# Function needs external variables to be defined in a project file:
	: "${OFFS_USER_SCRIPT:?variable unset}"    # offset on flash memory where user script is located
	: "${KERNEL_OFFS:?variable unset}"         # offset on flash memory where kernel is located

	PHOENIX_IMG="$PREFIX_BOOT/phoenix.img"   # user script + kernel + programs
	PHOENIX_DISK="$PREFIX_BOOT/phoenix.disk" # plo + PHOENIX_IMG
	rm -f "$PHOENIX_IMG" "$PHOENIX_DISK"

	sz=$(wc -c < "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT")
	if [ "$sz" -ge "$((KERNEL_OFFS - OFFS_USER_SCRIPT))" ]; then
		b_die "User script size too large. Please, change kernel offset or user script offset."
	fi

	# Loader
	OFFSET=0
	b_add2img "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$PHOENIX_DISK"

	# User script
	OFFSET="$OFFS_USER_SCRIPT"
	b_add2img "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT" "$PHOENIX_DISK"

	# Kernel
	OFFSET="$KERNEL_OFFS"
	b_add2img "${PREFIX_PROG_STRIPPED}$KERNEL_FILE" "$PHOENIX_DISK"

	# Programs
	for prog in "${PROGS[@]}"; do
		b_add2img "${PREFIX_PROG_STRIPPED}$prog" "$PHOENIX_DISK"
	done

	# System image (without plo)
	dd if="$PHOENIX_DISK" of="$PHOENIX_IMG" bs=1 skip="$OFFS_USER_SCRIPT" 2>/dev/null
}


# Function gets the following arguments:
# - $1 - path to target image file
# - KERNEL_OFFS - offset on memory where kernel is located
b_kernel_image() {
	IMG="$1"
	rm -f "$IMG"

	OFFSET="$KERNEL_OFFS"
	b_add2img "${PREFIX_PROG_STRIPPED}/$KERNEL_FILE" "$IMG"

	# Programs
	for prog in "${PROGS[@]}"; do
		b_add2img "${PREFIX_PROG_STRIPPED}$prog" "$IMG"
	done
}


b_dev_image() {
	b_log "Creating development images"

	# Function needs external variables to be defined in a project file:
	: "${DEV_USER_SCRIPT:?variable unset}"     # set of development commands
	: "${REMOTE_USER_SCRIPT:?variable unset}"  # set of develpoment commands which are called by dev user script
	: "${OFFS_USER_SCRIPT:?variable unset}"    # offset on flash memory where user script is located
	: "${KERNEL_OFFS:?variable unset}"         # offset on flash memory where kernel is located

	REMOTE_SCRIPT_PATH="$PREFIX_BOOT/script-dev.plo"
	PLO_DEV_IMG="$PREFIX_BOOT/plo-dev.img"
	PHOENIX_DEV_IMG="$PREFIX_BOOT/phoenix-dev.img"
	rm -f "$PLO_DEV_IMG" "$PHOENIX_DEV_IMG"

	b_mkscript_user "${DEV_USER_SCRIPT[@]}"
	printf "%s\n" "${REMOTE_USER_SCRIPT[@]}" > "$REMOTE_SCRIPT_PATH"

	sz=$(wc -c < "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT")
	if [ "$sz" -ge "$((KERNEL_OFFS - OFFS_USER_SCRIPT))" ]; then
		b_die "User script size too large. Please, change kernel offset or user script offset."
	fi

	# Loader
	OFFSET=0
	b_add2img "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$PLO_DEV_IMG"

	# Dev user script
	OFFSET="$OFFS_USER_SCRIPT"
	b_add2img "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT" "$PLO_DEV_IMG"

	dd if=/dev/zero of="$PLO_DEV_IMG" bs=1 seek="$OFFSET" count=$((KERNEL_OFFS - OFFS_USER_SCRIPT)) 2>/dev/null


	# Dev user script
	OFFSET=0
	b_add2img "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT" "$PHOENIX_DEV_IMG"

	# Kernel
	KERNEL_OFFS=$((KERNEL_OFFS - OFFS_USER_SCRIPT))
	OFFSET="$KERNEL_OFFS"
	b_add2img "${PREFIX_PROG_STRIPPED}$KERNEL_FILE" "$PHOENIX_DEV_IMG"

	# Programs
	for prog in "${PROGS[@]}"; do
		b_add2img "${PREFIX_PROG_STRIPPED}$prog" "$PHOENIX_DEV_IMG"
	done
}
