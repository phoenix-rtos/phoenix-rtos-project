#!/bin/bash
#
# Shell script for building armv7a7-imx6ull project
#
# Copyright 2018, 2019, 2020, 2021, 2023 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski, Maciej Purski, Hubert Badocha
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=arm-phoenix-

export BUSYBOX_CONFIG="$(realpath "busybox_config")"
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=y
export PORTS_LUA=n
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y

#
# Platform dependent parameters
#
export SIZE_PAGE=$((0x1000))
ADDR_DDR=$((0x80000000))


#
# Project specific build
#
export BOOT_DEVICE="flash0"
export MAGIC_USER_SCRIPT="dabaabad"

# TODO: move to nvm.yaml
ERASE_SIZE=$((64 * 4096))         # Rootfs disk erase block size (in bytes)


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building $TARGET project"
	image_builder.py script --nvm "$NVM_CONFIG" --script "$PLO_SCRIPT_PREINIT" --out script.plo

	if [ "$KERNEL_PLO_BOOT" = "y" ]; then
		b_log "Building PLO"

		RAM_SCRIPT=1 image_builder.py script --nvm "$NVM_CONFIG" --script "$PLO_SCRIPT_PREINIT" --out script-ram.plo
		make -C plo all

		cp -a "phoenix-rtos-hostutils/psu/plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.sdp" "$PREFIX_BOOT/plo-ram.sdp"
		cp -a "${PREFIX_PROG_STRIPPED}plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$PREFIX_BOOT/plo-ram.img"
	fi
}


# Temporary solution to omit phoenix-rtos-loader
b_syspage_gen() {
	img="$1"
	uscript="$2"

	fn="${PREFIX_PROG}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf"
	vectors=$(${CROSS}readelf -s "$fn" | awk '/init_vectors/ { printf("0x%s", $2) }')
	syspage=$(${CROSS}readelf -s "$fn" | awk '/syspage_data/ { printf("0x%s", $2) }')
	plugin=$(${CROSS}readelf -s "$fn" | awk '/plugin_ivt/ { printf("0x%s", $2) }')

	addr=$((syspage-vectors))
	sz=$((plugin-syspage))

	# TODO: move the functionality to the image_builder?
	"$PREFIX_BOOT/syspagen" \
		-a 32\
		-s "$ADDR_DDR:$addr:$sz" \
		-p "$PLO_SCRIPT_DIR/script.plo" \
		-u "$uscript" \
		-i "$img"
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	if [ "$KERNEL_PLO_BOOT" = "y" ]; then
		b_log "Image will boot from PLO."

		b_log "FLASH image"
		image_builder.py -v partition --nvm "$NVM_CONFIG" --name kernel --script "$PLO_SCRIPT_USER"
	else
		#FIXME: this code path hasn't yet been moved to image_builder

		# Parsed by syspagen for map and console commands.
		b_mkscript_preinit

		# Build production image
		b_log "RAM Image"

		#TODO: create `kernel` partition image without the script using image_builder
		b_kernel_image "$PREFIX_BOOT/phoenix.img"
		b_syspage_gen "$PREFIX_BOOT/phoenix.img" "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT"

		b_log "FLASH Image"
		# This is a workaround for target not using PLO.
		# As plo is not used user script is used only to:
		#    - upload executable binary file instead of elf to the board(kernelimg),
		#    - upload required apps(app).
		#TODO: create `kernel` partition image without the script using image_builder
		b_mkscript_user "${PRIMARY_SCRIPT[@]}"
		b_kernel_image "$PREFIX_BOOT/phoenix-kernel.img"
		b_syspage_gen "$PREFIX_BOOT/phoenix-kernel.img" "$PLO_SCRIPT_DIR/$NAME_USER_SCRIPT"
		cp -a "$PREFIX_BOOT/phoenix-kernel.img" "$PREFIX_BOOT/part_kernel.img"
	fi

	b_log "Creating rootfs"

	ROOTFS="$PREFIX_BOOT/rootfs.jffs2"

	if [ "$CLEANMARKER_SIZE" -eq 0 ]; then
		CLEANMARKER_ARG=("-n")
	else
		CLEANMARKER_ARG=("-c" "$CLEANMARKER_SIZE")
	fi

	mkfs.jffs2 -U "${CLEANMARKER_ARG[@]}" -l -m none -e $ERASE_SIZE -s $SIZE_PAGE -r "$PREFIX_ROOTFS"/ -o "$ROOTFS"

	if sumtool "${CLEANMARKER_ARG[@]}" -e $ERASE_SIZE -l -i "$ROOTFS" -o "$ROOTFS.tmp" 2> /dev/null; then
		echo "JFFS2 Summary nodes created"
		mv "$ROOTFS.tmp" "$ROOTFS"
	fi

	FS_SZ=$(image_builder.py query --nvm "$NVM_CONFIG" '{{ nvm.flash0.rootfs.size }}')
	sz=$(du -k "$ROOTFS" | awk '{ print $1 }')
	echo "rootfs size: ${sz} kB / $((FS_SZ / 1024)) kB"
	[ "$sz" -gt "$((FS_SZ / 1024))" ] && b_die "rootfs size exceeds the target partition!"

	image_builder.py -v disk --nvm "$NVM_CONFIG" --part "rootfs=$ROOTFS" --part "plo=${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img"

	# TODO: remove? CI currently has the disk filename hardcoded - maybe it should use nvm.yaml?
	cp -a "${PREFIX_BOOT}/flash0.disk" "${PREFIX_BOOT}/phoenix.disk"
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}


export -f b_build_target
