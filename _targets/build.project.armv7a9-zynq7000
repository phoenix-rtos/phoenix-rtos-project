#!/bin/bash
#
# Shell script for building armv7a9-zynq7000 project
#
# Copyright 2021 Phoenix Systems
# Author: Hubert Buczynski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=arm-phoenix-

export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Default platform dependent parameters
#
SIZE_PAGE=$((0x1000))
PAGE_MASK=$((~(SIZE_PAGE - 1)))
KERNEL_OFFS=$((0x11000))
FS_OFFS=$((0x100000))

#
# Project specific build
#

BOOT_DEVICE="flash0"
NAME_USER_SCRIPT="user.plo"
OFFS_USER_SCRIPT=$((0x10a00))
MAGIC_USER_SCRIPT=$((0xdabaabad))


# Pre-init script is launched before user script
PREINIT_SCRIPT=(
	"map kddr 0x100000 0x12ffff rwx"
	"map ddr 0x130000 0x900000 rwx"
	"map ocram1 0x00000000 0x00030000 rwx"
	"phfs usb0 1.2 phoenixd"
	"phfs uart0 0.0 phoenixd"
	"phfs uart1 0.1 raw"
	"phfs flash0 2.0 raw"
	"console 0.1")


# Production user script contains applications to run basic version of Phoenix-RTOS
USER_SCRIPT=(
	"kernel ${BOOT_DEVICE}"
	"app ${BOOT_DEVICE} -x dummyfs ddr ddr"
	"app ${BOOT_DEVICE} -x zynq7000-uart ddr ddr"
	"app ${BOOT_DEVICE} -x psh ddr ddr"
	"app ${BOOT_DEVICE} -x zynq7000-flash ddr ddr"
	"wait 500"
	"go!")


# definition of rc.psh file
RC_PSH=(
	":{}:"
	"W /bin/bind devfs /dev"
	"X /bin/psh"
)


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building sample project for $TARGET"

	b_log "Building plo"

	b_mkscript_preinit

	make -C plo base

	# plo image is reused only in loading system via qemu
	if [ "${TARGET_PROJECT}" = "qemu" ]; then
		cp "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" _boot/
	fi

	phoenix-rtos-build/scripts/mkimg-boot-zynq7000.sh \
		"${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" \
		"${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" \
		0

	cp "${PREFIX_PROG_STRIPPED}plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "${PREFIX_BOOT}/"
	cp "${PREFIX_PROG_STRIPPED}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "${PREFIX_BOOT}/"
}


b_flash_image() {
	local flash_path="${PREFIX_BOOT}/flash-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.bin"
	rm -f "${flash_path}"

	dd if="${PREFIX_BOOT}/phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.disk" of="${flash_path}" bs=4M 2>/dev/null
	dd if="${PREFIX_BOOT}/phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.jffs2" of="${flash_path}" bs=4096 seek=$((FS_OFFS/4096)) conv=notrunc 2>/dev/null

	truncate -s 16M "${flash_path}" 2>/dev/null
}


b_build_jffs2() {
	# !!! NOTE:
	#         For non-standard NOR flash memories, erase_sz & page_sz should be changed..
	local erase_sz=$((0x10000))
	local page_sz=$((0x100))

	# FIXME: does work only on macOS, for now hackish solution based on extending PATH
	mtd-utils/build.sh
	OLD_PATH="$PATH"
	PATH="$(pwd)/_build/host-generic-pc/prog/:$PATH"
	IMG="$PREFIX_BOOT/phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.jffs2"

	b_log "Filesystem"

	# rc.psh specified for zynq-7000 targets
	printf "%s\n" "${RC_PSH[@]}" > "$PREFIX_FS/root/etc/rc.psh"

	mkfs.jffs2 -U -m none -e $erase_sz -s $page_sz -n -r "$PREFIX_ROOTFS"/ -o "$IMG"
	if sumtool -e $erase_sz -i "$IMG" -o "$IMG.tmp" 2> /dev/null; then
		echo "JFFS2 Summary nodes created"
		mv "$IMG.tmp" "$IMG"
	fi

	sz=$(du -k "$IMG" | awk '{ print $1 }')
	echo "Filesystem size: ${sz}KB"

	PATH="$OLD_PATH"
}


b_image_target() {
	b_mkscript_user "${USER_SCRIPT[@]}"
	b_prod_image
	b_dev_image

	b_build_jffs2
	b_flash_image
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}


export -f b_build_target
