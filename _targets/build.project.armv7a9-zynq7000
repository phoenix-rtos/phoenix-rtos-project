#!/bin/bash
#
# Shell script for building armv7a9-zynq7000 project
#
# Copyright 2021 Phoenix Systems
# Author: Hubert Buczynski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=arm-phoenix-

export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

export PORTS_BUSYBOX=y

#
# Default platform dependent parameters
#
SIZE_PAGE=$((0x1000))
PAGE_MASK=$((~(SIZE_PAGE - 1)))
KERNEL_OFFS=$((0x11000))
FS_OFFS=$((0x800000))
BS_OFFS=$((0x400000))
if [ -f "${PROJECT_PATH}/bitstream.bin" ]; then
	BS_SZ=$(wc -c "${PROJECT_PATH}/bitstream.bin" | cut -f1 -d" ")
else
	BS_SZ=0
fi

#
# Project specific build
#

BOOT_DEVICE="flash0"
NAME_USER_SCRIPT="user.plo"
OFFS_USER_SCRIPT=$((0x10a00))
MAGIC_USER_SCRIPT=$((0xdabaabad))


# Pre-init script is launched before user script
PREINIT_SCRIPT=(
	"map kddr 0x100000 0x12ffff rwx"
	"map ddr 0x130000 0x900000 rwx"
	"map ocram1 0x00000000 0x00030000 rwx"
	"phfs usb0 1.2 phoenixd"
	"phfs uart0 0.0 phoenixd"
	"phfs uart1 0.1 raw"
	"phfs flash0 2.0 raw"
	"console 0.1")


# Production user script contains applications to run basic version of Phoenix-RTOS
USER_SCRIPT=(
	"kernel ${BOOT_DEVICE}"
	"app ${BOOT_DEVICE} -x dummyfs ddr ddr"
	"app ${BOOT_DEVICE} -x zynq7000-uart ddr ddr"
	"app ${BOOT_DEVICE} -x psh ddr ddr"
	"app ${BOOT_DEVICE} -x zynq7000-flash ddr ddr"
	"wait 500"
	"go!")


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building $TARGET project"

	b_log "Building phoenix-rtos-loader"
	b_mkscript_preinit
	make -C plo base

	# plo image is reused only in loading system via qemu
	if [ "${TARGET_PROJECT}" = "qemu" ]; then
		cp "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$PREFIX_BOOT/plo.img"
	fi

	phoenix-rtos-build/scripts/mkimg-boot-zynq7000.sh \
		"${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" \
		"${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" \
		0

	# Copy plo.elf with symbols to provide loading plo using gdb
	cp "${PREFIX_PROG}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "$PREFIX_BOOT/plo-gdb.elf"

	cp "${PREFIX_PROG_STRIPPED}plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$PREFIX_BOOT/plo-ram.img"
	cp "${PREFIX_PROG_STRIPPED}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "$PREFIX_BOOT/phoenix-kernel.elf"
	if [ -f "${PROJECT_PATH}/bitstream.bin" ]; then
		cp "${PROJECT_PATH}/bitstream.bin" "${PREFIX_BOOT}/"
	fi
}


b_image_target() {
	b_mkscript_user "${USER_SCRIPT[@]}"
	b_prod_image
	b_dev_image

	b_log "Creating rootfs"
	# !!! NOTE: For non-standard NOR flash memories, erase_sz & page_sz should be changed..
	local erase_sz=$((0x10000))
	local page_sz=$((0x100))

	# FIXME: does work only on macOS, for now hackish solution based on extending PATH
	mtd-utils/build.sh
	OLD_PATH="$PATH"
	PATH="$(pwd)/_build/host-generic-pc/prog/:$PATH"
	ROOTFS="$PREFIX_BOOT/rootfs.jffs2"

	mkfs.jffs2 -U -m none -e $erase_sz -s $page_sz -n -r "$PREFIX_ROOTFS"/ -o "$ROOTFS"
	if sumtool -e $erase_sz -i "$ROOTFS" -o "$ROOTFS.tmp" 2> /dev/null; then
		echo "JFFS2 Summary nodes created"
		mv "$ROOTFS.tmp" "$ROOTFS"
	fi

	sz=$(du -k "$ROOTFS" | awk '{ print $1 }')
	echo "rootfs size: ${sz}KB"

	PATH="$OLD_PATH"

	# Add bitstream to PHOENIX_DISK
	if [ -f "${PREFIX_BOOT}/bitstream.bin" ]; then
		printf "Copying "${PREFIX_BOOT}/bitstream.bin" (offs="$((BS_OFFS/4096))" blocks)\n"
		dd if="${PREFIX_BOOT}/bitstream.bin" of="$PHOENIX_DISK" bs=4096 seek=$((BS_OFFS/4096)) conv=notrunc 2>/dev/null
	fi

	# Add rootfs to PHOENIX_DISK
	printf "Copying "$ROOTFS" (offs="$((FS_OFFS/4096))" blocks)\n"
	dd if="$ROOTFS" of="$PHOENIX_DISK" bs=4096 seek=$((FS_OFFS/4096)) conv=notrunc 2>/dev/null
	truncate -s 16M "$PHOENIX_DISK" 2>/dev/null
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}


export -f b_build_target
