#!/bin/bash
#
# Shell script for building armv7m7-imxrt105x, armv7m7-imxrt106x project
#
# Copyright 2018, 2019, 2020 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski, Hubert Buczynski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

# TODO: remove CFLAGS and LDFLAGS and use ones from phoenix-rtos-build/Makefile.armv7m
CROSS=arm-phoenix-
CFLAGS="-Os -Wall -Wstrict-prototypes -g -mcpu=cortex-m7 -mtune=cortex-m7 -mfloat-abi=hard -mthumb\
	-fomit-frame-pointer -mno-unaligned-access -fdata-sections -ffunction-sections -fno-builtin"


LDFLAGS="-z max-page-size=0x1000"

export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"

#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=y
export PORTS_LUA=n
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y



#
# Platform dependent parameters
#
SIZE_PAGE=$((0x200))
PAGE_MASK=$((0xfffffe00))
KERNEL_OFFS=$((0x11000))


#
# Project specific build
#

PROGS=("dummyfs" "imxrt-multi" "psh" "imxrt-flash")


b_mkscript() {
	ksz=$((($(wc -c < "${PREFIX_PROG_STRIPPED}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf") + SIZE_PAGE - 1) & PAGE_MASK))
	poffs=$((KERNEL_OFFS + ksz))

	for prog in "${PROGS[@]}"; do
		psz=$((($(wc -c < "${PREFIX_PROG_STRIPPED}$prog") + SIZE_PAGE - 1) & PAGE_MASK))
		printf "@%s(%x:%x)\n" "$prog" "$poffs" "$psz" >> "$PREFIX_BUILD/plo/script.plo"
		((poffs+=psz))
	done

	cat _targets/armv7m7-imxrt106x.plo >> "$PREFIX_BUILD/plo/script.plo"
	printf "\0" >> "$PREFIX_BUILD/plo/script.plo"
}



b_build_target() {

	b_log "Building sample project for $TARGET"

	# TODO: move to psh install target
	ln -f "$PREFIX_ROOTFS/bin/"{psh,mount}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,bind}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,ps}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,mem}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,perf}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,sync}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,reboot}
	ln -f "$PREFIX_ROOTFS/bin/"{psh,top}


	# FIXME: build plo out of tree and without clean
	b_log "Building plo"
	(cd plo; make $MAKEFLAGS clean all)

	b_mkscript

	b_log "Relink plo to include the new script"
	(cd plo && make $MAKEFLAGS all)

	cp "${PREFIX_PROG_STRIPPED}plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" _boot/
	cp "phoenix-rtos-hostutils/psu/plo-ram-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.sdp" _boot/
}


b_add2img() {
	printf "Copying %s (offs=%dB)\n" "$1" "$OFFSET"
	dd if="$1" of="$2" bs=1 seek="$OFFSET" conv=notrunc 2>/dev/null
	SZ=$((($(wc -c < "$1") + SIZE_PAGE - 1) & PAGE_MASK))
	OFFSET=$((OFFSET + SZ))
}


b_image_target() {
	b_log "Creating image"

	IMG=_boot/phoenix-${TARGET}.disk
	rm -f "$IMG"

	# Loader
	OFFSET=0
	b_add2img "${PREFIX_PROG_STRIPPED}plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img" "$IMG"

	# Kernel
	OFFSET="$KERNEL_OFFS"
	b_add2img "${PREFIX_PROG_STRIPPED}phoenix-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.elf" "$IMG"

	#Programs
	for prog in "${PROGS[@]}"; do
		b_add2img "${PREFIX_PROG_STRIPPED}$prog" "$IMG"
	done
}


export -f b_build_target
