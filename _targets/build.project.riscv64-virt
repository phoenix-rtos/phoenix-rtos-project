#!/bin/bash
#
# Shell script for building riscv64-virt project
#
# Copyright 2018, 2019, 2020 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

CROSS=riscv64-phoenix-

: "${RISCV_LOADER="opensbi"}"

export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="

#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=n
export PORTS_LUA=n
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y


#
# Project specific build
#

b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}

b_build_target() {

	b_log "Building sample project for $TARGET"

	b_log "Creating CPIO archive"
	pushd "$PREFIX_PROG_STRIPPED" >/dev/null || exit 1
		ls dummyfs uart16550 psh | cpio -H newc -ov > "$PREFIX_BUILD/phoenix-rtos-kernel/programs.cpio" 2>/dev/null
	popd >/dev/null

	# Relink kernel to include newly created cpio archive
	make -C "phoenix-rtos-kernel" all

	# Convert kernel to flat binary
	"${CROSS}objcopy" -O binary "$PREFIX_PROG_STRIPPED/phoenix-$TARGET.elf" "$PREFIX_PROG_STRIPPED/phoenix-$TARGET.bin"

	# Add kernel to boot loader
	b_log "Adding kernel to boot loader"
	BBL_BUILD_DIR="$PREFIX_BUILD/riscv-pk"
	OSBI_BUILD_DIR="$PREFIX_BUILD/opensbi"

	if [ "$RISCV_LOADER" = "bbl" ]; then
		mkdir -p "$BBL_BUILD_DIR"
		pushd "$BBL_BUILD_DIR" > /dev/null || exit 1
			if [ ! -f "$BBL_BUILD_DIR/stamp.configured" ]; then
				"$TOPDIR/riscv/riscv-pk/configure" --host="${CROSS%?}" --with-payload="$PREFIX_PROG_STRIPPED/phoenix-$TARGET.elf" --disable-fp-emulation
				touch "$BBL_BUILD_DIR/stamp.configured"
			fi

			env -i PATH="$PATH" make $MAKEFLAGS all
		popd > /dev/null

		cp "$BBL_BUILD_DIR/bbl" "$PREFIX_BOOT/phoenix-$TARGET.bbl"
	elif [ "$RISCV_LOADER" = "opensbi" ]; then
		(cd "$TOPDIR/riscv/opensbi/" && make O="$OSBI_BUILD_DIR" CROSS_COMPILE="$CROSS" PLATFORM=generic FW_PAYLOAD_PATH="$PREFIX_PROG_STRIPPED/phoenix-$TARGET.bin")

		cp "$OSBI_BUILD_DIR/platform/generic/firmware/fw_payload.elf" "$PREFIX_BOOT/phoenix-$TARGET.osbi"
	else
		cp "$PREFIX_PROG_STRIPPED/phoenix-$TARGET.bin" "$PREFIX_BOOT/."
	fi
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"
	size=$(find "${PREFIX_ROOTFS}" -type f -exec du -k {} \; | awk 'BEGIN { sum=0 }; { sum+=$1; }; END { print sum }')
	size=$((size * 150 / 100))
	echo "Filesystem size: $size"

	genext2fs -b $size -d "$PREFIX_ROOTFS" "$PREFIX_BUILD/disk.ext2"
	mv "$PREFIX_BUILD/disk.ext2" "$PREFIX_BOOT/phoenix-$TARGET.disk"
}

b_test_target() {
	:
}

export -f b_build_target
