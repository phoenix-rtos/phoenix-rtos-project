#!/bin/bash
#
# Shell script for building ia32-generic project
#
# Copyright 2018, 2019 Phoenix Systems
# Author: Kaja Swat, Aleksander Kaminski, Pawel Pisarczyk, Lukasz Kosinski
#
[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "You should source this script, not execute it!" && exit 1

. "_targets/build.common"

CROSS=i386-pc-phoenix-

: "${CONSOLE=vga}"

export CONSOLE
export BUSYBOX_CONFIG=$(realpath "busybox_config")
export DROPBEAR_CUSTOM_CFLAGS="-DLTC_NO_BSWAP"
export PSH_DEFUSRPWDHASH="0B1ANiYi45IhxkfmUW155/GBd4IRE="


#
# Ports configuration
#
export PORTS_BUSYBOX=y
export PORTS_PCRE=y
export PORTS_OPENSSL=y
export PORTS_LIGHTTPD=y
export PORTS_DROPBEAR=y
export PORTS_LUA=y
export PORTS_LZO=y
export PORTS_OPENVPN=y
export PORTS_JANSSON=y
export PORTS_CURL=y
export PORTS_MICROPYTHON=y
export PORTS_LSB_VSX=y

#
# Platform dependent parameters
#
export SIZE_PAGE=$((0x1000))


#
# Project specific build
#
export BOOT_DEVICE="hd0"            # Default boot device
export MAGIC_USER_SCRIPT="baadf00d" # User script magic value


# Support setting multiple consoles in CONSOLE by listing them concatenated by a ','.
export CONSOLE_APP=
export CONSOLE_APP2=
export CONSOLE_DEVICES=

CONSOLES=(${CONSOLE//,/ })

if [ "${#CONSOLES[@]}" -eq 0 ]; then
	echo "At least one console must be set!"
	exit 1
elif [ "${#CONSOLES[@]}" -gt 2 ]; then
	echo "At most 2 consoles may be specified!"
	exit 1
elif [ "${CONSOLES[0]}" = "${CONSOLES[1]}" ]; then
	echo "Consoles cannot be the same!"
	exit 1
fi

case "${CONSOLES[0]}" in
	"serial" )
		CONSOLE_APP="uart16550"
		CONSOLE_DEVICES="0.0"
		;;
	"vga" )
		CONSOLE_APP="pc-tty"
		CONSOLE_DEVICES="3.0"
		;;
	* )
		echo "Invalid console \"${CONSOLES[0]}\"!"
		exit 1
		;;
esac

case "${CONSOLES[1]}" in
	"serial" )
		CONSOLE_APP2="uart16550"
		CONSOLE_DEVICES+=" 0.0"
		;;
	"vga" )
		CONSOLE_APP2="pc-tty"
		CONSOLE_DEVICES+=" 3.0"
		;;
	"" )
		;;
	* )
		echo "Invalid console \"${CONSOLES[1]}\"!"
		exit 1
		;;
esac


b_build_project() {
	b_log "Building user applications"
	make -C "_user" all install
}


b_build_target() {
	b_log "Building $TARGET project"

	b_log "Building phoenix-rtos-loader"
	image_builder.py script --nvm "$NVM_CONFIG" --script "$PLO_SCRIPT_PREINIT" --out script.plo
	make -C plo base
}


b_image_target() {
	b_log "Creating image from $PREFIX_ROOTFS"

	b_log "Creating rootfs"
	ROOTFS="$PREFIX_BOOT/part_rootfs.img"
	SIZE_PARTITION_KB=$(image_builder.py query --nvm "$NVM_CONFIG" '{{ nvm.hd0.rootfs.size // 1024 }}')

	rm -f "$ROOTFS"

	# Indicate that there is a secondary psh shell to run.
	echo ":{}:" > "$PREFIX_ROOTFS/etc/secondary.psh"
	case "${CONSOLES[1]}" in
		"serial" )
			echo -e "T /dev/ttyS0\nX /bin/psh -t /dev/ttyS0" >> "$PREFIX_ROOTFS/etc/secondary.psh"
			;;
		"vga" )
			echo -e "T /dev/tty0\nX /bin/psh -t /dev/tty0" >> "$PREFIX_ROOTFS/etc/secondary.psh"
			;;
	esac

	SIZE_ROOTFS=$(du -ks "$PREFIX_ROOTFS" | cut -f 1)
	echo "rootfs size: ${SIZE_ROOTFS} kB / $((SIZE_PARTITION_KB)) kB"
	[ "$SIZE_ROOTFS" -gt "$SIZE_PARTITION_KB" ] && b_die "rootfs size exceeds the target partition!"
	genext2fs -b "$SIZE_PARTITION_KB" -i 2048 -d "$PREFIX_ROOTFS" "$ROOTFS"

	# Disk image rootfs offset (in 512 byte sectors)
	OFFS_ROOTFS=$(image_builder.py query --nvm "$NVM_CONFIG" '{{ nvm.hd0.rootfs.offs // nvm.hd0._meta.block_size }}')

	# Generate MBR partition table
	PTABLE="$PREFIX_BOOT/part_hd0_mbr.img"
	{
		printf "$(b_le32hex $((0x80)))"
		printf "$(b_le32hex $((0x83)))"
		printf "$(b_le32hex $((OFFS_ROOTFS)))"
		printf "$(b_le32hex $((2 * SIZE_PARTITION_KB)))"
	} > "$PTABLE"

	# create all partition images
	image_builder.py partition --nvm "$NVM_CONFIG" --name plo --contents "$PREFIX_PROG_STRIPPED/plo-${TARGET_FAMILY}-${TARGET_SUBFAMILY}.img"
	image_builder.py -v partition --nvm "$NVM_CONFIG" --name kernel --script "$PLO_SCRIPT_USER"

	# create full disk image
	image_builder.py disk --nvm "$NVM_CONFIG"
}


b_test_target() {
	b_log "Build and install tests in the phoenix-rtos filesystem"
	make -C "phoenix-rtos-tests" all install
}


b_update_pkg() { :; }


export -f b_build_target
